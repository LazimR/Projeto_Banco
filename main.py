# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'L-Bank.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMessageBox, QApplication, QMainWindow
from tela_inicial import Ui_TelaLogin
from tela_cadastro import Ui_TelaCadastro
from tela_principal import Ui_TelaPrincipal
import socket
import hashlib
import re

conta_atual = ''
aba_atual = None

class Ui_Main(QtWidgets.QWidget):
    def setupUi(self, Main):
        Main.setObjectName("Main")
        Main.resize(640, 480)
        
        self.QtStack = QtWidgets.QStackedLayout()

        self.stack0 = QtWidgets.QMainWindow()
        self.stack1 = QtWidgets.QMainWindow()
        self.stack2 = QtWidgets.QMainWindow()

        self.tela_principal = Ui_TelaPrincipal()
        self.tela_principal.setupUi(self.stack1)

        self.tela_login = Ui_TelaLogin()
        self.tela_login.setupUi(self.stack0)
        
        self.tela_cadastro = Ui_TelaCadastro()
        self.tela_cadastro.setupUi(self.stack2)

        self.QtStack.addWidget(self.stack0)
        self.QtStack.addWidget(self.stack1)
        self.QtStack.addWidget(self.stack2)


class Main(QMainWindow, Ui_Main):


    def __init__(self):
        super(Main, self).__init__(None)
        self.setupUi(self)

        self.host = '192.168.43.226' #IP atual do servidor
        self.port = 8000
        self.saldo_atual = 0
        self.addr = ((self.host,self.port))
        self.socket_client = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.socket_client.connect(self.addr)

        self.tela_login.Login_button.clicked.connect(self.botao_login)
        self.tela_login.Cadastro_button.clicked.connect(self.abrirTelaCadastro)
        self.tela_login.Sair_Button.clicked.connect(self.finalizar)

        self.tela_cadastro.Cadastrar_button.clicked.connect(self.botao_cadastra)
        self.tela_cadastro.Voltar_button.clicked.connect(self.abrirTelaLogin)
        self.tela_cadastro.Sair_Button.clicked.connect(self.finalizar)

        self.tela_principal.Sair_Button.clicked.connect(self.finalizar)
        
        #Interações dos botões da Aba de opções

        self.tela_principal.Deposito_Button.clicked.connect(self.abre_AbaDeposito)
        self.tela_principal.Saque_Button.clicked.connect(self.abre_AbaSaque)
        self.tela_principal.Transf_Button_2.clicked.connect(self.abre_AbaTransf)
        self.tela_principal.Extrato_Button_2.clicked.connect(self.abre_AbaExtrato)
        self.tela_principal.Ocultar_Button.clicked.connect(self.mostra_Saldo)
        self.tela_principal.Logout_Button.clicked.connect(self.abrirTelaLogin)

        #Interações dos botões da Aba de saque
        self.tela_principal.Voltar_Button.clicked.connect(self.abre_AbaOpc)
        self.tela_principal.Sacar_Button.clicked.connect(self.botao_saque)

        #Interações dos botões da Aba de deposito
        self.tela_principal.Voltar_Button_2.clicked.connect(self.abre_AbaOpc)
        self.tela_principal.Depositar_Button.clicked.connect(self.botao_deposito)

        self.tela_principal.Voltar.clicked.connect(self.abre_AbaOpc)

        #Interações dos botões da Aba de transferência
        self.tela_principal.Voltar_Button_3.clicked.connect(self.abre_AbaOpc)
        self.tela_principal.Transf_Button.clicked.connect(self.botao_transf)
    
    def atualiza_tela_principal(self,nome,n):             
        self.tela_principal.Mensagem_user.setText(f'Seja bem-vindo {nome}  Nº{n}')
        self.tela_principal.Saldo_set.setText('******')

    def mostra_Saldo(self):
        if self.tela_principal.Saldo_set.text() == '******':
            self.tela_principal.Ocultar_Button.setStyleSheet("background-image: url('C:/Users/kndso/OneDrive/Documentos/UFPI 4/POO II/Códigos/Projeto Banco/Lazimr/Projeto_Banco/imagens/olho_aberto.png');\n"
"background-repeat: no-repeat;\n"
"border-radius: 7px;\n"
"border-style:solid;\n"
"border-width:1px;\n"
"border-color:black;\n"
"")
            self.tela_principal.Saldo_set.setText(f'{self.saldo_atual}')
        else:
            self.tela_principal.Saldo_set.setText('******')
            self.tela_principal.Ocultar_Button.setStyleSheet("background-image: url('C:/Users/kndso/OneDrive/Documentos/UFPI 4/POO II/Códigos/Projeto Banco/Lazimr/Projeto_Banco/imagens/olho_fechado.png');\n"
"background-repeat: no-repeat;\n"
"border-radius: 7px;\n"
"border-style:solid;\n"
"border-width:1px;\n"
"border-color:black;\n"
"")

    def abre_AbaOpc(self):
        global aba_atual
        if aba_atual == self.tela_principal.Frame_Saque:
            self.tela_principal.Frame_Saque.close()
            self.tela_principal.senhaLineEdit.setText('')
            self.tela_principal.ValorLineEdit.setText('')
            self.tela_principal.Frame_opc.show()
        
        elif aba_atual == self.tela_principal.Frame_deposito:
            self.tela_principal.Frame_deposito.close()
            self.tela_principal.ValorLineEdit_2.setText('')
            self.tela_principal.Frame_opc.show()
        
        elif aba_atual == self.tela_principal.Frame_extrato:
            self.tela_principal.Frame_extrato.close()
            self.tela_principal.Frame_opc.show()
        
        elif aba_atual == self.tela_principal.Frame_Transf:
            self.tela_principal.Frame_Transf.close()
            self.tela_principal.senhaLineEdit_2.setText('')
            self.tela_principal.ValorLineEdit_3.setText('')
            self.tela_principal.destinatarioLineEdit.setText('')
            self.tela_principal.Frame_opc.show()
        
        aba_atual = self.tela_principal.Frame_opc

    def abre_AbaDeposito(self):
        self.tela_principal.Frame_opc.close()
        self.tela_principal.Frame_deposito.show()
        global aba_atual
        aba_atual = self.tela_principal.Frame_deposito
    
    def abre_AbaSaque(self):
        self.tela_principal.Frame_opc.close()
        self.tela_principal.Frame_Saque.show()
        global aba_atual
        aba_atual = self.tela_principal.Frame_Saque

    def abre_AbaTransf(self):
        self.tela_principal.Frame_opc.close()
        self.tela_principal.Frame_Transf.show()
        global aba_atual
        aba_atual = self.tela_principal.Frame_Transf

    def abre_AbaExtrato(self):
        self.tela_principal.Frame_opc.close()
        self.tela_principal.Frame_extrato.show()
        self.tela_principal.Texto_extrato.setText(self.imprime_extrato())
        global aba_atual
        aba_atual = self.tela_principal.Frame_extrato

    def imprime_extrato(self):
        extrato = ''
        
        #Enviar pedido de extrato ao servidor, parâmetros (tipo do pedido,numero)
        self.socket_client.send(f'5,{conta_atual}'.encode())

        while(True):
            #Recebe um dado
            aux = self.socket_client.recv(1024).decode()
            #Se o dado for diferente de 1, significa que é uma data
            if aux != '1':
                #Concatena a data mais um \n e concatena com a variavel extrato
                extrato += aux + '\n'
            else:
                break
            self.socket_client.send(f'1,oi'.encode())
        return extrato


    def botao_saque(self):
        senha = self.tela_principal.senhaLineEdit.text()
        valor = self.tela_principal.ValorLineEdit.text()

        if not(senha == '' and valor == ''):
            try:
                float(valor)
                #Conversão da senha para MD5
                senha_hex = hashlib.md5(senha.encode())
                senha_hex = senha_hex.hexdigest()
                #Enviar pedido de saque ao servidor, parâmetros (tipo do pedido,senha,numero,valor)
                self.socket_client.send(f'3,{senha_hex},{conta_atual},{valor}'.encode())
                #Recebimento dos dados e separação
                mensagem = self.socket_client.recv(1024).decode()
                print(mensagem)
                mensagem = mensagem.split(',')
                #Verifica se a operação ocorreu corretamente
                if mensagem[0] == '1':
                    #Informa o usuário e limpa o campo
                    QMessageBox().information(None,'L-Bank','Saque feito com sucesso!')
                    self.tela_principal.senhaLineEdit.setText('')
                    self.tela_principal.ValorLineEdit.setText('')
                    #Verifica se o saldo está sendo exibido
                    
                    if not(self.tela_principal.Saldo_set.text() == '******'):
                        #Se o saldo estiver exibido, atualiza o valor e atribui o novo valor saldo_atual
                        self.tela_principal.Saldo_set.setText(f'{mensagem[1]}')
                        self.saldo_atual = float(mensagem[1])
                    else:
                        self.saldo_atual = float(mensagem[1])
                else:
                    QMessageBox().information(None,'L-Bank','Falha na operação!')
            except ValueError:
                QMessageBox().information(None,'L-Bank','Preencha o campo com valor numérico')
        else:
            QMessageBox().information(None,'L-Bank','Todos os dados devem ser preenchidos!')
    
    def botao_deposito(self):
        valor = self.tela_principal.ValorLineEdit_2.text()
        if not (valor == '') :
            try:
                float(valor)    
                #Enviar pedido de deposito ao servidor, parâmetros (tipo do pedido,numero,valor)
                self.socket_client.send(f'2,{conta_atual},{valor}'.encode())
                #Recebimento dos dados e separação
                mensagem = self.socket_client.recv(1024).decode()
                mensagem = mensagem.split(',')
                #Verifica se a operação ocorreu corretamente
                if mensagem[0] == '1':
                    #Informa o usuário e limpa o campo
                    QMessageBox().information(None,'L-Bank','Deposito feito com sucesso!')
                    self.tela_principal.ValorLineEdit_2.setText('')
                    #Verifica se o saldo está sendo exibido
                    if not(self.tela_principal.Saldo_set.text() == '******'):
                        #Se o saldo estiver exibido, atualiza o valor e atribui o novo valor saldo_atual
                        self.tela_principal.Saldo_set.setText(f'{mensagem[1]}')
                        self.saldo_atual = float(mensagem[1])
                    else:
                        self.saldo_atual = float(mensagem[1])

                else:
                    QMessageBox().information(None,'L-Bank','Falha na operação!')
            except ValueError:
                QMessageBox().information(None,'L-Bank','Preencha o campo com valor numérico')
        else:
            QMessageBox().information(None,'L-Bank','Todos os dados devem ser preenchidos!')

    def botao_transf(self):
        senha = self.tela_principal.senhaLineEdit_2.text()
        valor = self.tela_principal.ValorLineEdit_3.text()
        destino = self.tela_principal.destinatarioLineEdit.text()

        if not(senha == '' or valor == '' or destino == ''):
            try:
                float(valor)
                #Conversão da senha para MD5
                senha_hex = hashlib.md5(senha.encode())
                senha_hex = senha_hex.hexdigest()
                #Enviar pedido de transferência ao servidor, parâmetros (tipo do pedido,senha,n_R,n_D,valor)
                self.socket_client.send(f'4,{senha_hex},{conta_atual},{destino},{valor}'.encode())
                #Recebimento e separação dos dados
                mensagem = self.socket_client.recv(1024).decode()
                mensagem = mensagem.split(',')
                #Verifica se a operação ocorreu corretamente
                if mensagem[0] == '1':
                    #Informa ao usuário e limpa os campos
                    QMessageBox().information(None,'L-Bank','Transferência feita com sucesso!')
                    self.tela_principal.senhaLineEdit_2.setText('')
                    self.tela_principal.ValorLineEdit_3.setText('')
                    self.tela_principal.destinatarioLineEdit.setText('')
                    #Verifica se o saldo está sendo exibido
                    if not(self.tela_principal.Saldo_set.text() == '******'):
                        #Se o saldo estiver exibido, atualiza o valor e atribui o novo valor saldo_atual
                        self.tela_principal.Saldo_set.setText(f'{mensagem[1]}')
                        self.saldo_atual = float(mensagem[1])
                    else:
                        self.saldo_atual = float(mensagem[1])
                else:
                    QMessageBox().information(None,'L-Bank','Falha na operação!')
            except ValueError:
                QMessageBox().information(None,'L-Bank','Preencha o campo com valor numérico')
        else:
            QMessageBox().information(None,'L-Bank','Todos os dados devem ser preenchidos!')


    def botao_cadastra(self):
        nome = self.tela_cadastro.Nome_line.text()
        expr = re.compile('\d{3}\.\d{3}\.\d{3}\-\d{2}')
        cpf = self.tela_cadastro.Cpf_line.text()
        login = self.tela_cadastro.Login_line.text()
        senha = self.tela_cadastro.Senha_line.text()

        if not(nome == '' or senha == '' or cpf == '' or login == ''):
            if expr.search(cpf):
                #Conversão da senha para MD5
                senha_hex = hashlib.md5(senha.encode())
                senha_hex = senha_hex.hexdigest()
                #Enviar pedido de cadastro ao servidor, parâmetros (tipo do pedido,nome,cpf,login,senha)
                self.socket_client.send(f'0,{nome},{cpf},{login},{senha_hex}'.encode())
                #Recebimento dos dados e separação2
                mensagem = self.socket_client.recv(1024).decode()
                mensagem = mensagem.split(',')
                print(mensagem)
                #Verifica se a operação ocorreu corretamente
                if mensagem[0] == '1':

                    #Informa ao usuário e limpa os campos
                    QMessageBox().information(None,'L-Bank',f'Cadastro feito com sucesso!\nSeu número é {mensagem[1]}')
                    self.tela_cadastro.Nome_line.setText('')
                    self.tela_cadastro.Login_line.setText('')
                    self.tela_cadastro.Cpf_line.setText('')
                    self.tela_cadastro.Senha_line.setText('')
                else:
                    QMessageBox().information(None,'L-Bank','Titular já possui cadastrado!')
                        
            else:
                QMessageBox().information(None,'L-Bank','CPF inváldo. Utilize apenas números, pontos e hifén adequadamente.')
        else:
            QMessageBox().information(None,'L-Bank','Todos os dados devem ser preenchidos!')


    def botao_login(self):
        login = self.tela_login.Login_line.text()
        senha = self.tela_login.Senha_line.text()

        if not(login == '' or senha == ''):
            #Conversão da senha para MD5
            senha_hex = hashlib.md5(senha.encode())
            senha_hex = senha_hex.hexdigest()
            #Enviar pedido de login ao servidor, parâmetros (tipo do pedido,login,senha)
            self.socket_client.send(f'1,{login},{senha_hex}'.encode())
            #Recebimento dos dados e separação
            dados = self.socket_client.recv(1024).decode()
            dados = dados.split(',')
            #Verifica se operação ocorreu corretamente
            if dados[0] == '1':
                global conta_atual
                conta_atual = dados[2]
                #Limpa os campos e abre a tela de login
                self.tela_login.Login_line.setText('')
                self.tela_login.Senha_line.setText('')
                self.saldo_atual = float(dados[3])
                self.abrirTelaPrincipal(dados[1],dados[2])
            else:
                QMessageBox().information(None,'L-Bank','Login/Senha incorreto!')    
        else:
            QMessageBox().information(None,'L-Bank','Todos os dados devem ser preenchidos!')


    def abrirTelaCadastro(self):
        self.QtStack.setCurrentIndex(2)
    
    def abrirTelaLogin(self):
        self.QtStack.setCurrentIndex(0)
        self.tela_principal.Frame_opc.show()
        
    
    def abrirTelaPrincipal(self,nome,numero):
        self.QtStack.setCurrentIndex(1)
        self.atualiza_tela_principal(nome,numero)
        self.tela_principal.Frame_deposito.close()
        self.tela_principal.Frame_Transf.close()
        self.tela_principal.Frame_extrato.close()
        self.tela_principal.Frame_Saque.close()
    
    def finalizar(self):
        self.socket_client.send('1'.encode())
        sys.exit()

if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    show_main = Main()

    sys.exit(app.exec_())

